package resources

import (
	"bytes"
	"fmt"
	"io"
	"text/template"
)

var (
	pkgTpl      *template.Template
	fileInfoTpl *template.Template
	fileDataTpl *template.Template
)

func reader(input io.Reader) (string, error) {
	var (
		buff       bytes.Buffer
		err        error
		blockwidth int = 12
		curblock   int = 0
	)

	b := make([]byte, blockwidth)

	for n, err := input.Read(b); err == nil; n, err = input.Read(b) {
		for i := 0; i < n; i++ {
			fmt.Fprintf(&buff, "0x%02x,", b[i])
			curblock++
			if curblock < blockwidth {
				continue
			}
			buff.WriteByte('\n')
			buff.Write([]byte{'\t', '\t'})
			curblock = 0
		}
	}

	return buff.String(), err
}

func init() {
	fileInfoTpl = template.Must(template.New("fileInfo").Parse(`&FileInfo{
					name:    "{{ .Stat.Name }}",
					size:    {{ .Stat.Size }},
					modTime: time.Unix({{ .Stat.ModTime.Unix }},{{ .Stat.ModTime.UnixNano }}),
					isDir:   {{ .Stat.IsDir }},
				}`))

	fileDataTpl = template.Must(template.New("fileData").Funcs(template.FuncMap{"reader": reader}).Parse(`[]byte{
					{{ reader . }}
				}`))

	pkgTpl = template.Must(template.New("pkg").Parse(`{{ if .Tag }}// +build {{ .Tag }} 

{{ end }}//Generated by github.com/omeid/go-resources
package {{ .Pkg }}

import (
  "net/http"
  "time"
  "bytes"
  "io"
  "os"
  "path/filepath"
  "strings"
  "errors"
)


{{ if .Declare }}
var {{ .Var }} http.FileSystem
{{ end }}

// http.FileSystem implementation.
type FileSystem struct {
	files map[string]File
}

func (fs *FileSystem) Open(name string) (http.File, error) {
	if filepath.Separator != '/' && strings.IndexRune(name, filepath.Separator) >= 0 ||
	    strings.Contains(name, "\x00") {
		return nil, errors.New("http: invalid character in file path")
	}
	file, ok := fs.files[name]
	if !ok {
		return nil, os.ErrNotExist
	}
	file.Reader = bytes.NewReader(file.data)
	return &file, nil
}

type File struct {
	*bytes.Reader
	data []byte
	fi *FileInfo
	fileInfos []os.FileInfo
	readdirIndex int
}

// A noop-closer.
func (f *File) Close() error {
	return nil
}

func (f *File) Readdir(count int) ([]os.FileInfo, error) {
	if !f.fi.isDir {
		return nil, os.ErrInvalid
	}
	if count <= 0 {
		return f.fileInfos, nil
	}
	max := len(f.fileInfos)
	if f.readdirIndex >= max {
		return nil, io.EOF
	}
	from := f.readdirIndex
	f.readdirIndex += count
	if f.readdirIndex > max {
		f.readdirIndex = max
	}
	return f.fileInfos[from:f.readdirIndex], nil
}

func (f *File) Stat() (os.FileInfo, error) {
  return f.fi, nil
}

type FileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
	isDir   bool
	sys     interface{}
}

func (f *FileInfo) Name() string {
	return f.name
}
func (f *FileInfo) Size() int64 {
	return f.size
}

func (f *FileInfo) Mode() os.FileMode {
	return f.mode
}

func (f *FileInfo) ModTime() time.Time {
	return f.modTime
}

func (f *FileInfo) IsDir() bool {
	return f.isDir
}

func (f *FileInfo) Sys() interface{} {
	return f.sys
}

func init() {
	{{ .Var }} = &FileSystem{
		files: map[string]File{ {{range $path, $file := .Files }}
			"{{ $path }}": File{
				fi: {{ $file.RenderedFileInfo }},
				data: {{ $file.RenderedData }},
				fileInfos: []os.FileInfo{ {{ range $file.FileInfos }}
					{{ . }},{{ end }}
				},
			},{{ end }}
		},
	}
}
`))
}
